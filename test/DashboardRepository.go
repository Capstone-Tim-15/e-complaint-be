// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "ecomplaint/model/web"
)

// DashboardRepository is an autogenerated mock type for the DashboardRepository type
type DashboardRepository struct {
	mock.Mock
}

// CountComplaint provides a mock function with given fields: table
func (_m *DashboardRepository) CountComplaint(table string) ([]web.Monthly, error) {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for CountComplaint")
	}

	var r0 []web.Monthly
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]web.Monthly, error)); ok {
		return rf(table)
	}
	if rf, ok := ret.Get(0).(func(string) []web.Monthly); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.Monthly)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountSolved provides a mock function with given fields: table
func (_m *DashboardRepository) CountSolved(table string) ([]web.Monthly, error) {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for CountSolved")
	}

	var r0 []web.Monthly
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]web.Monthly, error)); ok {
		return rf(table)
	}
	if rf, ok := ret.Get(0).(func(string) []web.Monthly); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.Monthly)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalAll provides a mock function with given fields:
func (_m *DashboardRepository) TotalAll() (*web.LandingPage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalAll")
	}

	var r0 *web.LandingPage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*web.LandingPage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *web.LandingPage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.LandingPage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDashboardRepository creates a new instance of DashboardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDashboardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DashboardRepository {
	mock := &DashboardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
