// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// ComplaintRepository is an autogenerated mock type for the ComplaintRepository type
type ComplaintRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: complaint
func (_m *ComplaintRepository) Create(complaint *domain.Complaint) (*domain.Complaint, error) {
	ret := _m.Called(complaint)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Complaint) (*domain.Complaint, error)); ok {
		return rf(complaint)
	}
	if rf, ok := ret.Get(0).(func(*domain.Complaint) *domain.Complaint); ok {
		r0 = rf(complaint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Complaint) error); ok {
		r1 = rf(complaint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: complaint, id
func (_m *ComplaintRepository) Delete(complaint *domain.Complaint, id string) error {
	ret := _m.Called(complaint, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Complaint, string) error); ok {
		r0 = rf(complaint, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, pageSize
func (_m *ComplaintRepository) FindAll(page int, pageSize int) ([]domain.Complaint, int64, error) {
	ret := _m.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Complaint
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Complaint, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Complaint); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllUser provides a mock function with given fields: id
func (_m *ComplaintRepository) FindAllUser(id string) ([]domain.Complaint, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindAllUser")
	}

	var r0 []domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Complaint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Complaint); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: category, limit
func (_m *ComplaintRepository) FindByCategory(category string, limit int64) ([]domain.Complaint, int64, error) {
	ret := _m.Called(category, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 []domain.Complaint
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int64) ([]domain.Complaint, int64, error)); ok {
		return rf(category, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int64) []domain.Complaint); ok {
		r0 = rf(category, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64) int64); ok {
		r1 = rf(category, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int64) error); ok {
		r2 = rf(category, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id, role
func (_m *ComplaintRepository) FindById(id string, role string) (*domain.Complaint, error) {
	ret := _m.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.Complaint, error)); ok {
		return rf(id, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.Complaint); ok {
		r0 = rf(id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: status, page, pageSize
func (_m *ComplaintRepository) FindByStatus(status string, page int, pageSize int) ([]domain.Complaint, int64, error) {
	ret := _m.Called(status, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []domain.Complaint
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]domain.Complaint, int64, error)); ok {
		return rf(status, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []domain.Complaint); ok {
		r0 = rf(status, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(status, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(status, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByStatusUser provides a mock function with given fields: status, id
func (_m *ComplaintRepository) FindByStatusUser(status string, id string) ([]domain.Complaint, error) {
	ret := _m.Called(status, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusUser")
	}

	var r0 []domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]domain.Complaint, error)); ok {
		return rf(status, id)
	}
	if rf, ok := ret.Get(0).(func(string, string) []domain.Complaint); ok {
		r0 = rf(status, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: complaint, id
func (_m *ComplaintRepository) Update(complaint *domain.Complaint, id string) (*domain.Complaint, error) {
	ret := _m.Called(complaint, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Complaint, string) (*domain.Complaint, error)); ok {
		return rf(complaint, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Complaint, string) *domain.Complaint); ok {
		r0 = rf(complaint, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Complaint, string) error); ok {
		r1 = rf(complaint, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComplaintRepository creates a new instance of ComplaintRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComplaintRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComplaintRepository {
	mock := &ComplaintRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
