// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// FaqRepository is an autogenerated mock type for the FaqRepository type
type FaqRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: faq
func (_m *FaqRepository) Create(faq *domain.FAQ) (*domain.FAQ, error) {
	ret := _m.Called(faq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.FAQ) (*domain.FAQ, error)); ok {
		return rf(faq)
	}
	if rf, ok := ret.Get(0).(func(*domain.FAQ) *domain.FAQ); ok {
		r0 = rf(faq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.FAQ) error); ok {
		r1 = rf(faq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *FaqRepository) FindAll() ([]domain.FAQ, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.FAQ, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.FAQ); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: category
func (_m *FaqRepository) FindByCategory(category string) (*domain.FAQ, error) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.FAQ, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.FAQ); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *FaqRepository) FindById(id string) (*domain.FAQ, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.FAQ, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.FAQ); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: FAQ, id
func (_m *FaqRepository) Update(FAQ *domain.FAQ, id string) (*domain.FAQ, error) {
	ret := _m.Called(FAQ, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.FAQ, string) (*domain.FAQ, error)); ok {
		return rf(FAQ, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.FAQ, string) *domain.FAQ); ok {
		r0 = rf(FAQ, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.FAQ, string) error); ok {
		r1 = rf(FAQ, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFaqRepository creates a new instance of FaqRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFaqRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FaqRepository {
	mock := &FaqRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
