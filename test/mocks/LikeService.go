// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "ecomplaint/model/web"
)

// LikeService is an autogenerated mock type for the LikeService type
type LikeService struct {
	mock.Mock
}

// CreateLike provides a mock function with given fields: ctx, request
func (_m *LikeService) CreateLike(ctx echo.Context, request web.LikesCreateRequest) (*domain.Likes, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateLike")
	}

	var r0 *domain.Likes
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.LikesCreateRequest) (*domain.Likes, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.LikesCreateRequest) *domain.Likes); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Likes)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.LikesCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLike provides a mock function with given fields: ctx, id
func (_m *LikeService) DeleteLike(ctx echo.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByAll provides a mock function with given fields: ctx
func (_m *LikeService) FindByAll(ctx echo.Context) ([]domain.Likes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindByAll")
	}

	var r0 []domain.Likes
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Likes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Likes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Likes)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *LikeService) FindById(ctx echo.Context, id string) (*domain.Likes, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Likes
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.Likes, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.Likes); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Likes)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLike provides a mock function with given fields: ctx, request, id
func (_m *LikeService) UpdateLike(ctx echo.Context, request web.LikesUpdateRequest, id string) (*domain.Likes, error) {
	ret := _m.Called(ctx, request, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLike")
	}

	var r0 *domain.Likes
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.LikesUpdateRequest, string) (*domain.Likes, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.LikesUpdateRequest, string) *domain.Likes); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Likes)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.LikesUpdateRequest, string) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLikeService creates a new instance of LikeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeService {
	mock := &LikeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
