// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "ecomplaint/model/web"
)

// OTPService is an autogenerated mock type for the OTPService type
type OTPService struct {
	mock.Mock
}

// CheckOTPAdmin provides a mock function with given fields: ctx, request, id
func (_m *OTPService) CheckOTPAdmin(ctx echo.Context, request web.OTPCheckRequest, id string) (*domain.OTPAdmin, error) {
	ret := _m.Called(ctx, request, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckOTPAdmin")
	}

	var r0 *domain.OTPAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCheckRequest, string) (*domain.OTPAdmin, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCheckRequest, string) *domain.OTPAdmin); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTPAdmin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.OTPCheckRequest, string) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOTPUser provides a mock function with given fields: ctx, request, id
func (_m *OTPService) CheckOTPUser(ctx echo.Context, request web.OTPCheckRequest, id string) (*domain.OTPUser, error) {
	ret := _m.Called(ctx, request, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckOTPUser")
	}

	var r0 *domain.OTPUser
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCheckRequest, string) (*domain.OTPUser, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCheckRequest, string) *domain.OTPUser); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTPUser)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.OTPCheckRequest, string) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOTPAdmin provides a mock function with given fields: ctx, request
func (_m *OTPService) CreateOTPAdmin(ctx echo.Context, request web.OTPCreateRequest) (*domain.OTPAdmin, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateOTPAdmin")
	}

	var r0 *domain.OTPAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCreateRequest) (*domain.OTPAdmin, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCreateRequest) *domain.OTPAdmin); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTPAdmin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.OTPCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOTPUser provides a mock function with given fields: ctx, request
func (_m *OTPService) CreateOTPUser(ctx echo.Context, request web.OTPCreateRequest) (*domain.OTPUser, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateOTPUser")
	}

	var r0 *domain.OTPUser
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCreateRequest) (*domain.OTPUser, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.OTPCreateRequest) *domain.OTPUser); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTPUser)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.OTPCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOTPService creates a new instance of OTPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPService {
	mock := &OTPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
