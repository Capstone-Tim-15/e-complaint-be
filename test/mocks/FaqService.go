// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "ecomplaint/model/web"
)

// FaqService is an autogenerated mock type for the FaqService type
type FaqService struct {
	mock.Mock
}

// CreateFaq provides a mock function with given fields: ctx, request
func (_m *FaqService) CreateFaq(ctx echo.Context, request web.FaqRequest) (*domain.FAQ, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateFaq")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.FaqRequest) (*domain.FAQ, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.FaqRequest) *domain.FAQ); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.FaqRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *FaqService) FindAll(ctx echo.Context) ([]domain.FAQ, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.FAQ, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.FAQ); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: ctx, category
func (_m *FaqService) FindByCategory(ctx echo.Context, category string) (*domain.FAQ, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.FAQ, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.FAQ); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *FaqService) FindById(ctx echo.Context, id string) (*domain.FAQ, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.FAQ, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.FAQ); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFaq provides a mock function with given fields: ctx, request, id
func (_m *FaqService) UpdateFaq(ctx echo.Context, request web.FaqUpdateRequest, id string) (*domain.FAQ, error) {
	ret := _m.Called(ctx, request, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFaq")
	}

	var r0 *domain.FAQ
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.FaqUpdateRequest, string) (*domain.FAQ, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.FaqUpdateRequest, string) *domain.FAQ); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FAQ)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.FaqUpdateRequest, string) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFaqService creates a new instance of FaqService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFaqService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FaqService {
	mock := &FaqService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
