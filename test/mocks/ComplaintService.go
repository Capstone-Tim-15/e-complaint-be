// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "ecomplaint/model/web"
)

// ComplaintService is an autogenerated mock type for the ComplaintService type
type ComplaintService struct {
	mock.Mock
}

// CreateComplaint provides a mock function with given fields: ctx, request
func (_m *ComplaintService) CreateComplaint(ctx echo.Context, request web.ComplaintCreateRequest) (*domain.Complaint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateComplaint")
	}

	var r0 *domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ComplaintCreateRequest) (*domain.Complaint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ComplaintCreateRequest) *domain.Complaint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ComplaintCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComplaint provides a mock function with given fields: ctx, id
func (_m *ComplaintService) DeleteComplaint(ctx echo.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, page, pageSize
func (_m *ComplaintService) FindAll(ctx echo.Context, page int, pageSize int) ([]domain.Complaint, int64, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Complaint
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, int) ([]domain.Complaint, int64, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, int) []domain.Complaint); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, int) int64); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(echo.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllUser provides a mock function with given fields: ctx, id
func (_m *ComplaintService) FindAllUser(ctx echo.Context, id string) ([]domain.Complaint, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindAllUser")
	}

	var r0 []domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) ([]domain.Complaint, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) []domain.Complaint); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: ctx, category, limit
func (_m *ComplaintService) FindByCategory(ctx echo.Context, category string, limit int64) ([]domain.Complaint, int64, error) {
	ret := _m.Called(ctx, category, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 []domain.Complaint
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, int64) ([]domain.Complaint, int64, error)); ok {
		return rf(ctx, category, limit)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, int64) []domain.Complaint); ok {
		r0 = rf(ctx, category, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, int64) int64); ok {
		r1 = rf(ctx, category, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(echo.Context, string, int64) error); ok {
		r2 = rf(ctx, category, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: ctx, id, role
func (_m *ComplaintService) FindById(ctx echo.Context, id string, role string) (*domain.Complaint, error) {
	ret := _m.Called(ctx, id, role)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) (*domain.Complaint, error)); ok {
		return rf(ctx, id, role)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) *domain.Complaint); ok {
		r0 = rf(ctx, id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string) error); ok {
		r1 = rf(ctx, id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: ctx, status, page, pageSize
func (_m *ComplaintService) FindByStatus(ctx echo.Context, status string, page int, pageSize int) ([]domain.Complaint, int64, error) {
	ret := _m.Called(ctx, status, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []domain.Complaint
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, int, int) ([]domain.Complaint, int64, error)); ok {
		return rf(ctx, status, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, int, int) []domain.Complaint); ok {
		r0 = rf(ctx, status, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, int, int) int64); ok {
		r1 = rf(ctx, status, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(echo.Context, string, int, int) error); ok {
		r2 = rf(ctx, status, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByStatusUser provides a mock function with given fields: ctx, status, id
func (_m *ComplaintService) FindByStatusUser(ctx echo.Context, status string, id string) ([]domain.Complaint, error) {
	ret := _m.Called(ctx, status, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusUser")
	}

	var r0 []domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) ([]domain.Complaint, error)); ok {
		return rf(ctx, status, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) []domain.Complaint); ok {
		r0 = rf(ctx, status, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string) error); ok {
		r1 = rf(ctx, status, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComplaint provides a mock function with given fields: ctx, id, request
func (_m *ComplaintService) UpdateComplaint(ctx echo.Context, id string, request web.ComplaintUpdateRequest) (*domain.Complaint, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComplaint")
	}

	var r0 *domain.Complaint
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, web.ComplaintUpdateRequest) (*domain.Complaint, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, web.ComplaintUpdateRequest) *domain.Complaint); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Complaint)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, web.ComplaintUpdateRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComplaintService creates a new instance of ComplaintService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComplaintService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComplaintService {
	mock := &ComplaintService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
