// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "ecomplaint/model/web"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// CreateAdmin provides a mock function with given fields: ctx, request
func (_m *AdminService) CreateAdmin(ctx echo.Context, request web.AdminCreateRequest) (*domain.Admin, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdmin")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminCreateRequest) (*domain.Admin, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminCreateRequest) *domain.Admin); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.AdminCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdmin provides a mock function with given fields: ctx, id
func (_m *AdminService) DeleteAdmin(ctx echo.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, page, pageSize
func (_m *AdminService) FindAll(ctx echo.Context, page int, pageSize int) ([]domain.Admin, int64, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Admin
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, int) ([]domain.Admin, int64, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, int) []domain.Admin); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, int) int64); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(echo.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: ctx, id
func (_m *AdminService) FindById(ctx echo.Context, id string) (*domain.Admin, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.Admin, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.Admin); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *AdminService) FindByName(ctx echo.Context, name string) (*domain.Admin, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.Admin, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.Admin); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginAdmin provides a mock function with given fields: ctx, request
func (_m *AdminService) LoginAdmin(ctx echo.Context, request web.AdminLoginRequest) (*domain.Admin, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for LoginAdmin")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminLoginRequest) (*domain.Admin, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminLoginRequest) *domain.Admin); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.AdminLoginRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, request, id
func (_m *AdminService) ResetPassword(ctx echo.Context, request web.AdminResetPasswordRequest, id string) (*domain.Admin, error) {
	ret := _m.Called(ctx, request, id)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminResetPasswordRequest, string) (*domain.Admin, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminResetPasswordRequest, string) *domain.Admin); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.AdminResetPasswordRequest, string) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdmin provides a mock function with given fields: ctx, request, id
func (_m *AdminService) UpdateAdmin(ctx echo.Context, request web.AdminUpdateRequest, id string) (*domain.Admin, error) {
	ret := _m.Called(ctx, request, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAdmin")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminUpdateRequest, string) (*domain.Admin, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.AdminUpdateRequest, string) *domain.Admin); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.AdminUpdateRequest, string) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhotoProfile provides a mock function with given fields: ctx, id, imageUrl
func (_m *AdminService) UpdatePhotoProfile(ctx echo.Context, id string, imageUrl string) (*domain.Admin, error) {
	ret := _m.Called(ctx, id, imageUrl)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhotoProfile")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) (*domain.Admin, error)); ok {
		return rf(ctx, id, imageUrl)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) *domain.Admin); ok {
		r0 = rf(ctx, id, imageUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string) error); ok {
		r1 = rf(ctx, id, imageUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
