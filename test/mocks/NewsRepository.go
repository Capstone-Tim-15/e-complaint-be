// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewsRepository is an autogenerated mock type for the NewsRepository type
type NewsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: news
func (_m *NewsRepository) Create(news *domain.News) (*domain.News, error) {
	ret := _m.Called(news)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.News
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.News) (*domain.News, error)); ok {
		return rf(news)
	}
	if rf, ok := ret.Get(0).(func(*domain.News) *domain.News); ok {
		r0 = rf(news)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.News) error); ok {
		r1 = rf(news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *NewsRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByAll provides a mock function with given fields: page, pageSize
func (_m *NewsRepository) FindByAll(page int, pageSize int) ([]domain.News, int64, error) {
	ret := _m.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByAll")
	}

	var r0 []domain.News
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.News, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.News); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByCategory provides a mock function with given fields: category, limit
func (_m *NewsRepository) FindByCategory(category string, limit int64) ([]domain.News, int64, error) {
	ret := _m.Called(category, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 []domain.News
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int64) ([]domain.News, int64, error)); ok {
		return rf(category, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int64) []domain.News); ok {
		r0 = rf(category, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64) int64); ok {
		r1 = rf(category, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int64) error); ok {
		r2 = rf(category, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id
func (_m *NewsRepository) FindById(id string) (*domain.News, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.News
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.News, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.News); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTitle provides a mock function with given fields: title, page, pageSize
func (_m *NewsRepository) FindByTitle(title string, page int, pageSize int) ([]domain.News, int64, error) {
	ret := _m.Called(title, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByTitle")
	}

	var r0 []domain.News
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]domain.News, int64, error)); ok {
		return rf(title, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []domain.News); ok {
		r0 = rf(title, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(title, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(title, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: news, id
func (_m *NewsRepository) Update(news *domain.News, id string) (*domain.News, error) {
	ret := _m.Called(news, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.News
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.News, string) (*domain.News, error)); ok {
		return rf(news, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.News, string) *domain.News); ok {
		r0 = rf(news, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.News, string) error); ok {
		r1 = rf(news, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNewsRepository creates a new instance of NewsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsRepository {
	mock := &NewsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
