// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// CheckAdmin provides a mock function with given fields: senderId
func (_m *CommentRepository) CheckAdmin(senderId string) (*domain.Admin, error) {
	ret := _m.Called(senderId)

	if len(ret) == 0 {
		panic("no return value specified for CheckAdmin")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Admin, error)); ok {
		return rf(senderId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Admin); ok {
		r0 = rf(senderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(senderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUser provides a mock function with given fields: senderId
func (_m *CommentRepository) CheckUser(senderId string) (*domain.User, error) {
	ret := _m.Called(senderId)

	if len(ret) == 0 {
		panic("no return value specified for CheckUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(senderId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(senderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(senderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: mess
func (_m *CommentRepository) Create(mess *domain.Comment) (*domain.Comment, error) {
	ret := _m.Called(mess)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) (*domain.Comment, error)); ok {
		return rf(mess)
	}
	if rf, ok := ret.Get(0).(func(*domain.Comment) *domain.Comment); ok {
		r0 = rf(mess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Comment) error); ok {
		r1 = rf(mess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
