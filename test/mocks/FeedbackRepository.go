// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "ecomplaint/model/domain"

	mock "github.com/stretchr/testify/mock"
)

// FeedbackRepository is an autogenerated mock type for the FeedbackRepository type
type FeedbackRepository struct {
	mock.Mock
}

// CheckAdmin provides a mock function with given fields: senderId
func (_m *FeedbackRepository) CheckAdmin(senderId string) (*domain.Admin, error) {
	ret := _m.Called(senderId)

	if len(ret) == 0 {
		panic("no return value specified for CheckAdmin")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Admin, error)); ok {
		return rf(senderId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Admin); ok {
		r0 = rf(senderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(senderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUser provides a mock function with given fields: senderId
func (_m *FeedbackRepository) CheckUser(senderId string) (*domain.User, error) {
	ret := _m.Called(senderId)

	if len(ret) == 0 {
		panic("no return value specified for CheckUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(senderId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(senderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(senderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: feedback
func (_m *FeedbackRepository) Create(feedback *domain.Feedback) (*domain.Feedback, error) {
	ret := _m.Called(feedback)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback) (*domain.Feedback, error)); ok {
		return rf(feedback)
	}
	if rf, ok := ret.Get(0).(func(*domain.Feedback) *domain.Feedback); ok {
		r0 = rf(feedback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Feedback) error); ok {
		r1 = rf(feedback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *FeedbackRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByAll provides a mock function with given fields: page, pageSize
func (_m *FeedbackRepository) FindByAll(page int, pageSize int) ([]domain.Feedback, int64, error) {
	ret := _m.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByAll")
	}

	var r0 []domain.Feedback
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Feedback, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Feedback); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id
func (_m *FeedbackRepository) FindById(id string) (*domain.Feedback, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Feedback, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Feedback); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNewsId provides a mock function with given fields: newsID, page, pageSize
func (_m *FeedbackRepository) FindByNewsId(newsID string, page int, pageSize int) ([]domain.Feedback, int64, error) {
	ret := _m.Called(newsID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByNewsId")
	}

	var r0 []domain.Feedback
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]domain.Feedback, int64, error)); ok {
		return rf(newsID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []domain.Feedback); ok {
		r0 = rf(newsID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(newsID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(newsID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: feedback, id
func (_m *FeedbackRepository) Update(feedback *domain.Feedback, id string) (*domain.Feedback, error) {
	ret := _m.Called(feedback, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback, string) (*domain.Feedback, error)); ok {
		return rf(feedback, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Feedback, string) *domain.Feedback); ok {
		r0 = rf(feedback, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Feedback, string) error); ok {
		r1 = rf(feedback, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFeedbackRepository creates a new instance of FeedbackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedbackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedbackRepository {
	mock := &FeedbackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
